// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dict.proto

package go_micro_srv_consignment

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Availability struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Availability) Reset()         { *m = Availability{} }
func (m *Availability) String() string { return proto.CompactTextString(m) }
func (*Availability) ProtoMessage()    {}
func (*Availability) Descriptor() ([]byte, []int) {
	return fileDescriptor_67812e90854f6714, []int{0}
}

func (m *Availability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Availability.Unmarshal(m, b)
}
func (m *Availability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Availability.Marshal(b, m, deterministic)
}
func (m *Availability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Availability.Merge(m, src)
}
func (m *Availability) XXX_Size() int {
	return xxx_messageInfo_Availability.Size(m)
}
func (m *Availability) XXX_DiscardUnknown() {
	xxx_messageInfo_Availability.DiscardUnknown(m)
}

var xxx_messageInfo_Availability proto.InternalMessageInfo

func (m *Availability) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type Word struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Word) Reset()         { *m = Word{} }
func (m *Word) String() string { return proto.CompactTextString(m) }
func (*Word) ProtoMessage()    {}
func (*Word) Descriptor() ([]byte, []int) {
	return fileDescriptor_67812e90854f6714, []int{1}
}

func (m *Word) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Word.Unmarshal(m, b)
}
func (m *Word) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Word.Marshal(b, m, deterministic)
}
func (m *Word) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Word.Merge(m, src)
}
func (m *Word) XXX_Size() int {
	return xxx_messageInfo_Word.Size(m)
}
func (m *Word) XXX_DiscardUnknown() {
	xxx_messageInfo_Word.DiscardUnknown(m)
}

var xxx_messageInfo_Word proto.InternalMessageInfo

func (m *Word) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Letter struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Letter) Reset()         { *m = Letter{} }
func (m *Letter) String() string { return proto.CompactTextString(m) }
func (*Letter) ProtoMessage()    {}
func (*Letter) Descriptor() ([]byte, []int) {
	return fileDescriptor_67812e90854f6714, []int{2}
}

func (m *Letter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Letter.Unmarshal(m, b)
}
func (m *Letter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Letter.Marshal(b, m, deterministic)
}
func (m *Letter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Letter.Merge(m, src)
}
func (m *Letter) XXX_Size() int {
	return xxx_messageInfo_Letter.Size(m)
}
func (m *Letter) XXX_DiscardUnknown() {
	xxx_messageInfo_Letter.DiscardUnknown(m)
}

var xxx_messageInfo_Letter proto.InternalMessageInfo

func (m *Letter) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type Nothing struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nothing) Reset()         { *m = Nothing{} }
func (m *Nothing) String() string { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()    {}
func (*Nothing) Descriptor() ([]byte, []int) {
	return fileDescriptor_67812e90854f6714, []int{3}
}

func (m *Nothing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nothing.Unmarshal(m, b)
}
func (m *Nothing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nothing.Marshal(b, m, deterministic)
}
func (m *Nothing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nothing.Merge(m, src)
}
func (m *Nothing) XXX_Size() int {
	return xxx_messageInfo_Nothing.Size(m)
}
func (m *Nothing) XXX_DiscardUnknown() {
	xxx_messageInfo_Nothing.DiscardUnknown(m)
}

var xxx_messageInfo_Nothing proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Availability)(nil), "go.micro.srv.consignment.Availability")
	proto.RegisterType((*Word)(nil), "go.micro.srv.consignment.Word")
	proto.RegisterType((*Letter)(nil), "go.micro.srv.consignment.Letter")
	proto.RegisterType((*Nothing)(nil), "go.micro.srv.consignment.Nothing")
}

func init() { proto.RegisterFile("dict.proto", fileDescriptor_67812e90854f6714) }

var fileDescriptor_67812e90854f6714 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x31, 0x4b, 0xc4, 0x40,
	0x10, 0x85, 0x89, 0x68, 0xce, 0x0c, 0x56, 0x8b, 0xe8, 0x71, 0x88, 0xc4, 0x14, 0x87, 0xd5, 0x22,
	0xfa, 0x0b, 0x4e, 0x05, 0x9b, 0x43, 0x21, 0x16, 0x57, 0x59, 0x24, 0x9b, 0x21, 0x19, 0x4c, 0x76,
	0x64, 0x77, 0x0c, 0xe4, 0xd7, 0xfa, 0x57, 0xe4, 0x92, 0x6d, 0x2c, 0x82, 0x16, 0x96, 0x8f, 0xef,
	0xbd, 0xb7, 0x6f, 0x77, 0x01, 0x2a, 0x32, 0xa2, 0x3f, 0x1c, 0x0b, 0xab, 0x65, 0xcd, 0xba, 0x23,
	0xe3, 0x58, 0x7b, 0xd7, 0x6b, 0xc3, 0xd6, 0x53, 0x6d, 0x3b, 0xb4, 0x92, 0xad, 0xe1, 0x64, 0xd3,
	0x17, 0xd4, 0x16, 0x25, 0xb5, 0x24, 0x83, 0x3a, 0x83, 0xd8, 0x4b, 0x21, 0x9f, 0x7e, 0x19, 0xa5,
	0xd1, 0xf5, 0x71, 0x1e, 0x54, 0x76, 0x01, 0x87, 0x3b, 0x76, 0x95, 0x3a, 0x85, 0x23, 0x21, 0x69,
	0x71, 0xc4, 0x49, 0x3e, 0x89, 0x2c, 0x85, 0x78, 0x8b, 0x22, 0xe8, 0xc6, 0xfc, 0xd0, 0x95, 0xdc,
	0x06, 0x43, 0x50, 0x59, 0x02, 0x8b, 0x67, 0x96, 0x86, 0x6c, 0x7d, 0xfb, 0x75, 0x00, 0xf0, 0x48,
	0x46, 0x88, 0x6d, 0xe1, 0x06, 0xf5, 0x0a, 0xc9, 0x43, 0x83, 0xe6, 0x7d, 0xac, 0xbf, 0xd4, 0x73,
	0x4b, 0xf5, 0x9e, 0xaf, 0xd6, 0xf3, 0xfc, 0xc7, 0x35, 0xb6, 0xb0, 0xd8, 0x54, 0xd5, 0x9f, 0x2a,
	0xaf, 0xe6, 0x79, 0x58, 0xac, 0x5e, 0x00, 0x72, 0xec, 0xb8, 0xc7, 0xff, 0x2a, 0x7c, 0x83, 0xf3,
	0x27, 0x94, 0xbd, 0xdb, 0xef, 0x48, 0x9a, 0x7b, 0xac, 0xc9, 0x86, 0x07, 0x4c, 0xe7, 0xd3, 0x93,
	0x63, 0xf5, 0xcb, 0xf9, 0x37, 0x51, 0x19, 0x8f, 0xbf, 0x7e, 0xf7, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x5a, 0x02, 0x57, 0x6d, 0x03, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DictionaryClient is the client API for Dictionary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DictionaryClient interface {
	CheckWord(ctx context.Context, in *Word, opts ...grpc.CallOption) (*Availability, error)
	AddWord(ctx context.Context, in *Word, opts ...grpc.CallOption) (*Nothing, error)
	RemoveWord(ctx context.Context, in *Word, opts ...grpc.CallOption) (*Nothing, error)
	GetWordsWithBeginLetter(ctx context.Context, in *Letter, opts ...grpc.CallOption) (Dictionary_GetWordsWithBeginLetterClient, error)
}

type dictionaryClient struct {
	cc *grpc.ClientConn
}

func NewDictionaryClient(cc *grpc.ClientConn) DictionaryClient {
	return &dictionaryClient{cc}
}

func (c *dictionaryClient) CheckWord(ctx context.Context, in *Word, opts ...grpc.CallOption) (*Availability, error) {
	out := new(Availability)
	err := c.cc.Invoke(ctx, "/go.micro.srv.consignment.Dictionary/CheckWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) AddWord(ctx context.Context, in *Word, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/go.micro.srv.consignment.Dictionary/AddWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) RemoveWord(ctx context.Context, in *Word, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/go.micro.srv.consignment.Dictionary/RemoveWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) GetWordsWithBeginLetter(ctx context.Context, in *Letter, opts ...grpc.CallOption) (Dictionary_GetWordsWithBeginLetterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dictionary_serviceDesc.Streams[0], "/go.micro.srv.consignment.Dictionary/GetWordsWithBeginLetter", opts...)
	if err != nil {
		return nil, err
	}
	x := &dictionaryGetWordsWithBeginLetterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dictionary_GetWordsWithBeginLetterClient interface {
	Recv() (*Word, error)
	grpc.ClientStream
}

type dictionaryGetWordsWithBeginLetterClient struct {
	grpc.ClientStream
}

func (x *dictionaryGetWordsWithBeginLetterClient) Recv() (*Word, error) {
	m := new(Word)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DictionaryServer is the server API for Dictionary service.
type DictionaryServer interface {
	CheckWord(context.Context, *Word) (*Availability, error)
	AddWord(context.Context, *Word) (*Nothing, error)
	RemoveWord(context.Context, *Word) (*Nothing, error)
	GetWordsWithBeginLetter(*Letter, Dictionary_GetWordsWithBeginLetterServer) error
}

func RegisterDictionaryServer(s *grpc.Server, srv DictionaryServer) {
	s.RegisterService(&_Dictionary_serviceDesc, srv)
}

func _Dictionary_CheckWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Word)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).CheckWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.consignment.Dictionary/CheckWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).CheckWord(ctx, req.(*Word))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_AddWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Word)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).AddWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.consignment.Dictionary/AddWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).AddWord(ctx, req.(*Word))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_RemoveWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Word)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).RemoveWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.consignment.Dictionary/RemoveWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).RemoveWord(ctx, req.(*Word))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_GetWordsWithBeginLetter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Letter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DictionaryServer).GetWordsWithBeginLetter(m, &dictionaryGetWordsWithBeginLetterServer{stream})
}

type Dictionary_GetWordsWithBeginLetterServer interface {
	Send(*Word) error
	grpc.ServerStream
}

type dictionaryGetWordsWithBeginLetterServer struct {
	grpc.ServerStream
}

func (x *dictionaryGetWordsWithBeginLetterServer) Send(m *Word) error {
	return x.ServerStream.SendMsg(m)
}

var _Dictionary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.consignment.Dictionary",
	HandlerType: (*DictionaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckWord",
			Handler:    _Dictionary_CheckWord_Handler,
		},
		{
			MethodName: "AddWord",
			Handler:    _Dictionary_AddWord_Handler,
		},
		{
			MethodName: "RemoveWord",
			Handler:    _Dictionary_RemoveWord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWordsWithBeginLetter",
			Handler:       _Dictionary_GetWordsWithBeginLetter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dict.proto",
}
